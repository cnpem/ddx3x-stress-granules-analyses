# Statistical analyses

Statistical analyses were conducted using Python's Pingouin library (version 5.5) to evaluate differences between groups. The Mann-Whitney U test was employed to compare group similarities with respect to stress granules area and the count of stress granules per cell, as this non-parametric test is appropriate for assessing differences between two independent groups without assuming normality of data distribution. Statistical significance was determined at a p-value threshold of 0.05, with results reported as median values and interquartile ranges to appropriately represent the distribution of non-normally distributed data (boxplots and violinplots).

```{python}
import pandas as pd
import pingouin as pg
import matplotlib.pyplot as plt
import seaborn as sns
from IPython.display import display, HTML
```

```{python}
cells_df = pd.read_csv("output/granules_per_cell.csv")
granules_df = pd.read_csv("output/granule_area.csv")
```

```{python}
cells_df["group_treatment"] = cells_df.apply(lambda x: f'{x.group}_{x.treatment}', axis=1)
granules_df["group_treatment"] = granules_df.apply(lambda x: f'{x.group}_{x.treatment}', axis=1)
```

```{python}
# create a list of group-treatment combinations
g = [
    'WT_CT', 'WT_ARS', 'WT_GLU-40min', 
    'R326H_CT', 'R326H_ARS', 'R326H_GLU-40min',
    'L556S_CT', 'L556S_ARS', 'L556S_GLU-40min']
```

```{python}
mw_area_tests = []
for i in range(len(g)):    
    for j in range(i, len(g)):
        result_mw = pg.mwu(granules_df[granules_df.group_treatment == g[i]]['area'], granules_df[granules_df.group_treatment == g[j]]['area'])
        result_effsize = pg.compute_effsize(granules_df[granules_df.group_treatment == g[i]]['area'], granules_df[granules_df.group_treatment == g[j]]['area'], eftype="hedges")
        mw_area_tests.append({"a": g[i], "b": g[j], "pval":result_mw['p-val'].values[0], "effsize":result_effsize})
```

```{python}
mw_count_tests = []
for i in range(len(g)):
    for j in range(i, len(g)):
        result_mw = pg.mwu(cells_df[cells_df.group_treatment == g[i]]['granule_count'], cells_df[cells_df.group_treatment == g[j]]['granule_count'])
        result_effsize = pg.compute_effsize(cells_df[cells_df.group_treatment == g[i]]['granule_count'], cells_df[cells_df.group_treatment == g[j]]['granule_count'], eftype="hedges")
        mw_count_tests.append({"a": g[i], "b": g[j], "pval":result_mw['p-val'].values[0], "effsize":result_effsize})
```

```{python}
mw_count_wout_zeros_tests = []
for i in range(len(g)):
    for j in range(i, len(g)):
        result_mw = pg.mwu(cells_df[(cells_df.group_treatment == g[i])&(cells_df.granule_count > 0)]['granule_count'], cells_df[(cells_df.group_treatment == g[j])&(cells_df.granule_count > 0)]['granule_count'])
        result_effsize = pg.compute_effsize(cells_df[(cells_df.group_treatment == g[i])&(cells_df.granule_count > 0)]['granule_count'], cells_df[(cells_df.group_treatment == g[j])&(cells_df.granule_count > 0)]['granule_count'], eftype="hedges")
        mw_count_wout_zeros_tests.append({"a": g[i], "b": g[j], "pval":result_mw['p-val'].values[0], "effsize":result_effsize})
```

```{python}
df_sg_count_tests = pd.DataFrame(mw_count_tests)
df_sg_count_wout_zeros_tests = pd.DataFrame(mw_count_wout_zeros_tests)
df_area_tests = pd.DataFrame(mw_area_tests)
```

```{python}
def flag_sig(pval):
    if pval < 0.001:
        return "***"
    elif pval < 0.01:
        return "**"
    elif pval < 0.05:
        return "*"
    else:
        return ""
```

```{python}
# add significance flag to all dataframes
df_sg_count_tests["sig"] = df_sg_count_tests["pval"].apply(flag_sig)
df_sg_count_wout_zeros_tests["sig"] = df_sg_count_wout_zeros_tests["pval"].apply(flag_sig)
df_area_tests["sig"] = df_area_tests["pval"].apply(flag_sig)
```

## Stress granule area

In this section we report the results of the Mann-Whitney U test for stress granule area.

```{python}
#|fig-cap: "Heatmap of Mann-Whitney U test results for stress granule area"
#|fig-align: "center"
#|fig-title: "Mann-Whitney U test results for stress granule area."
fig, axs = plt.subplots(1,2, figsize=(10,4), sharey=True)
# fig, axs = plt.subplots(1,2, figsize=(16,6))
df_tmp1 = df_area_tests.pivot(index="a", columns="b", values="pval")[g].sort_values(by=g)
sns.heatmap(df_tmp1, ax=axs[0], square=True, annot=True, fmt='.3f', vmax=0.1, annot_kws={"size": 6})
df_tmp2 = df_area_tests.pivot(index="a", columns="b", values="effsize")[g].sort_values(by=g)
sns.heatmap(df_tmp2, ax=axs[1], square=True, annot=True, fmt='.3f', cmap="coolwarm", center=0, annot_kws={"size": 6})
axs[0].set_title("Mann-Whitney U test (p-value)")
axs[1].set_title("Hedges' g effect size")
axs[0].set_ylabel("Group")
axs[1].set_ylabel("Group")
axs[0].set_xlabel("Group")
axs[1].set_xlabel("Group")
fig.suptitle("Area", fontsize=20)
fig.savefig("plots/mw_area.png")
```

The table below shows the results of the Mann-Whitney U test for stress granule area.

```{python}
display(HTML(df_area_tests.to_html()))
```

## Stress granule count

In this section we report the results of the Mann-Whitney U test for stress granule count.

```{python}
fig, axs = plt.subplots(1,2, figsize=(10,4), sharey=True)
df_tmp1 = df_sg_count_tests.pivot(index="a", columns="b", values="pval")[g].sort_values(by=g)
sns.heatmap(df_tmp1, ax=axs[0], square=True, annot=True, fmt='.3f', vmax=0.1, annot_kws={"size": 6})
df_tmp2 = df_sg_count_tests.pivot(index="a", columns="b", values="effsize")[g].sort_values(by=g)
sns.heatmap(df_tmp2, ax=axs[1], square=True, annot=True, fmt='.3f', cmap="coolwarm", center=0, annot_kws={"size": 6})
axs[0].set_title("Mann-Whitney U test (p-value)")
axs[1].set_title("Hedges' g effect size")
axs[0].set_ylabel("Group")
axs[1].set_ylabel("Group")
axs[0].set_xlabel("Group")
axs[1].set_xlabel("Group")
fig.suptitle("Count per cell", fontsize=20)
fig.savefig("plots/mw_count.png")
```

The table below shows the results of the Mann-Whitney U test for stress granule count.

```{python}
display(HTML(df_sg_count_tests.to_html()))
```

## Stress granule count excluding cells without stress granules

In this section we report the results of the Mann-Whitney U test for stress granule count excluding cells with 0 stress granules.

```{python}
fig, axs = plt.subplots(1,2, figsize=(10,4), sharey=True)
df_tmp1 = df_sg_count_wout_zeros_tests.pivot(index="a", columns="b", values="pval")[g].sort_values(by=g)
sns.heatmap(df_tmp1, ax=axs[0], square=True, annot=True, fmt='.3f', vmax=0.1, annot_kws={"size": 6})
df_tmp2 = df_sg_count_wout_zeros_tests.pivot(index="a", columns="b", values="effsize")[g].sort_values(by=g)
sns.heatmap(df_tmp2, ax=axs[1], square=True, annot=True, fmt='.3f', cmap="coolwarm", center=0, annot_kws={"size": 6})
axs[0].set_title("Mann-Whitney U test (p-value)")
axs[1].set_title("Hedges' g effect size")
axs[0].set_ylabel("Group")
axs[1].set_ylabel("Group")
axs[0].set_xlabel("Group")
axs[1].set_xlabel("Group")
fig.suptitle("Count per cell (without zeros)", fontsize=20)
fig.savefig("plots/mw_count_wout_zeros.png")
```

The table below shows the results of the Mann-Whitney U test for stress granule count excluding cells with 0 stress granules.

```{python}
display(HTML(df_sg_count_wout_zeros_tests.to_html()))
```


## Number of stress granules per group-treatment

The table below shows the number of stress granules per group-treatment and some descritive statistics.

```{python}
granules_df.groupby(["group", "treatment"])[['area', 'perimeter', 'eccentricity']].describe()
```

```{python}
# granules_df.groupby(["group", "treatment", "image_number"]).count()
```